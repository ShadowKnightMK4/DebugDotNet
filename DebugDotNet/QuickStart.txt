QuickStart.txt

How to use this class library.

	[Win32DebugApi] static class contains indirect public imports to the library's NativeMethods class that directly imports several direct 
	Win32 kernel routines for the debugging part.


	[DebugEvent] class is heavily modified from DEBUG_EVENT struct example code on pinvoke.net.  It's a core part of this library. When an event
	happens this structure is filled out with the event data.  


	In the namespace at  DebugDotNet.Win32.Debugger.EventDebugger lives a class that already wraps the message pump and exposes c# events / callbacks
your code can subscribe too.


[Slower Start]
	You'll need a way to tell Windows you wish to debug a program

		Win32DebugApi.DebugPriv sets or turns off Process.EnableDebugMode() / Process.LeaveDebugMode() 
		Going this route requires elevates admin privilege from what I've see. (This sets SE_DEBUG_PRIV) in [your] app

		If your app is already running, use Win32DebugApi.DebugProcess() to begin watching for events and Win32DebugApi.DebugProcessStop() to quit
		doing that.

		DebugProcess class imports just enough to allow creating a process with the Win32 DEBUG_PROCESS flag enabled. Use the GetProcess() routine
		on that to get an actual fully functional version of the c# Process class.  This class opens the possibility for  you
		to get a CREATE_PROCESS event before user code runs once your message pump is running.

		Reading about how the Win32 Debug api works on the MSDN website is recommended.

[Message Pump]
	DebugEvent CurrentEvent

	while (some condition)
	{
		if (Win32Api.WaitForDebugEvent(ref CurrentEvent) == true)
		{
			// there's an event
				do_something_to_handle_it();
				// tell Windows how to proceed. For non exception events ContinueStatus.DBG_CONTINUE works ok

				/* the different is when handling an exception. If you do not handle it (or can't). Tell Windows taht with ContinueStatus.DBG_EXCEPTION_NOT_HANDLED */
				Win32Api.ContinueDebugEvent(CurrentEvent.dwProcessId, CurrentEvent.dwThreadId, ContinueStatus)
		}
	}













